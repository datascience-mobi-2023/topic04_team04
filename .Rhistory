repeat_count <- 12
population_df_replicated <- pop_placeholder[rep(row.names(pop_placeholder), each = repeat_count), ]
row.names(population_df_replicated) <- NULL
# combine all population data in each
total_population = rbind(total_population, population_df_replicated)
sorted_total_population = total_population[order(total_population$"Reporting_areas"),]
data_total = cbind(data_total,sorted_total_population[,c(2,3)])
row.names(data_total) = NULL
first_date = as.Date("2006-01-01")
last_date = as.Date("2020-12-31")
time_column_short = seq(first_date, last_date, by = "month")
time_column_short = as.Date(time_column_short, format = "%Y-%m")
time_column = rep(time_column_short, times = 77)
data_total = cbind(data_total, time_column)
#data_total = subset(data_total, select = -time_column)
detect_na <- function(x) {
is_na <- x %in% c("N/A", "na", "NA", "n/a")
replace(x, is_na, NA)
}
data_total <- apply(data_total, 2, detect_na)
rmv.rows = apply(data_total,1,function(x){sum(is.na(x))})
i.missing = which(rmv.rows >0)
data_total = as.data.frame(data_total)
data_total$dengue_cases = as.integer(data_total$dengue_cases)
data_total$population_count = as.integer(data_total$population_count)
dimensions = dim(data_total)
R= dimensions[1]
for(Zeile in 1:R){
Population <- data_total$population_count[Zeile]
Infection <- data_total$dengue_cases[Zeile]
Incidence = (Infection/Population)*100000
data_total$incidence[Zeile] <- Incidence
}
clean_data_total = as.data.frame(data_total[-i.missing,])
num_col = c("temperature", "Longitude", "Latitude", "incidence")
int_col = c("dengue_cases","population_count","year")
date_col = c("time_column")
clean_data_total[int_col] = lapply(clean_data_total[int_col], as.integer)
clean_data_total[num_col] = lapply(clean_data_total[num_col], as.numeric)
clean_data_total[date_col] = lapply(clean_data_total[date_col], as.Date)
summary(clean_data_total)
data_total = as.data.frame(data_total)
num_col = c("temperature", "Longitude", "Latitude", "incidence")
int_col = c("dengue_cases","population_count","year")
date_col = c("time_column")
data_total[int_col] = lapply(data_total[int_col], as.integer)
data_total[num_col] = lapply(data_total[num_col], as.numeric)
data_total[date_col] = lapply(data_total[date_col], as.Date)
data_total = subset(data_total, select = c("data_names", "Reporting_areas", "year", "month", "time_column", "dengue_cases", "population_count", "temperature", "Longitude", "Latitude", "incidence"))
save(data_total, file = "data_total.RData")
summary(data_total)
for (i in 1:dim(data_total)[1]) {
if(data_total$Reporting_areas[i]=="Bungkan"){
Datum <- data_total$time_column[i]
for(j in 1:dim(data_total)[1]){
if(data_total$Reporting_areas[j] == "Nong Khai" & data_total$time_column[j] == Datum){
data_total$dengue_cases[j]<- ifelse(is.na(data_total$dengue_cases[i]), data_total$dengue_cases[j], data_total$dengue_cases[i]+data_total$dengue_cases[j])
data_total$population_count[j]<- ifelse(is.na(data_total$population_count[i]), data_total$population_count[j], data_total$population_count[i]+data_total$population_count[j])
data_total$incidence[j]<- ifelse(is.na(data_total$incidence[i]), data_total$incidence[j], data_total$incidence[i]+data_total$incidence[j])
}
}
}
}
data_total <- data_total[data_total$Reporting_areas != "Bungkan", ]
month_vec = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec" )
total_thailand = data.frame(data_names = character(), dengue_cases = numeric())
for (i in 2006:2020) {
name_years = paste0("rows_", i)
assign(name_years, data_total[data_total$year == i, ])
for (month in month_vec) {
name_months = paste0(name_years, month)
a = get(name_years)
assign(name_months, a[a$month == month, ])
b = get(name_months)
total_cases = sum(b$dengue_cases, na.rm = T)
name_column = paste0(i,"_", month)
placeholder_df = data.frame(data_names = name_column, dengue_cases = total_cases)
total_thailand = rbind(total_thailand, placeholder_df)
}
}
total_thailand = cbind(total_thailand, time_column_short)
View(data_total)
View(data_total)
View(data_total)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(sdm)
library(readxl)
library(mgcv)
library(ncdf4)
attach(data_total)
t2m <- stack ("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(t2m, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
pdf(file="C:/Users/thadl/OneDrive/Dokumente/Bioinfo/Klimaprojekt/maxtemp_Abun2.pdf")
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
attach(data_total)
t2m <- stack ("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
View(t2m)
p1 <- raster::predict(t2m, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
model1 <- gam(incidence~s(temperature, k=5), family = "quasipoisson",  na.rm = T)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
knitr::opts_chunk$set(echo = TRUE)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
plot.gam(model1)
load(data_total)
library(readxl)
library(nlme)
library(gam)
library(gam)
library(sdm)
library(raster)
library(ncdf4)
library(ncdf4)
library(mgcv)
library(ncdf4)
library(mgcv)
attach(data_total)
model1 <- gam(incidence~s(temperature, k=5), family = "quasipoisson",  na.rm = T)
plot.gam(model1)
p1 <- raster::predict(t2m, model1, type = "response")
model1 <- gam(incidence~s(temperature, k=5), data = data_total, family = "quasipoisson",  na.rm = T)
search()
linear_model <- gam(incidence~temperature)
smooth_model <- gam(incidence~s(temperature, k=5), family = "quasipoisson",  na.rm = T)
AIC(linear_model, smooth_model)
plot.gam(model1)
summary(model1)
plot.gam(model1)
linear_model <- gam(incidence~temperature)
AIC(model1)
detach(data_total)
attach(data_total)
model1 <- gam(incidence~s(temperature, k=5), data = data_total, family = "quasipoisson",  na.rm = T)
model1 <- gam(incidence~s(temperature, k=5), data = data_total, family = "quasipoisson",  na.rm = T)
plot.gam(model1)
AIC(model1)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
model1 <- gam(dengue_cases~s(temperature, k=5), data = data_total, family = "quasipoisson",  na.rm = T)
plot.gam(model1)
AIC(model1)
summary(model1) #edf: → a value close to 1 tends to be close to a linear term → a higher value means that the spline is more wiggly (non-linear).
summary(data_total)
class(data_total)
class(data_total$incidence)
model1 <- gam(incidence~s(temperature), k=5, data = data_total, family = "quasipoisson",  na.rm = T)
model1 <- gam(incidence~s(temperature), k=5, family = "quasipoisson",  na.rm = T)
model1 <- gam(incidence~s(temperature), family = "quasipoisson",  na.rm = T)
plot.gam(model1)
?gam()
model1 <- gam(incidence~s(temperature, 5), family = "quasipoisson",  na.rm = T)
model1 <- gam(incidence~s(temperature, k = 5), family = "quasipoisson",  na.rm = T)
linear_model <- gam(incidence~temperature)
smooth_model <- gam(incidence~s(temperature))
smooth_model <- gam(incidence~s(temperature))
AIC(model1)
AIC(linear_model, smooth_model)
#F-Wert und der p-Wert geben die statistische Signifikanz der glatten Funktion an. In diesem Fall ist die glatte Funktion von "temperature" hoch signifikant (p-Wert < 2e-16), was darauf hindeutet, dass sie einen signifikanten Einfluss auf die Vorhersage der "incidence" hat.Der angegebene R-squared-Wert (R-sq.(adj)) von 0.0407 gibt an, wie gut das Modell die Varianz der abhängigen Variable erklärt. In diesem Fall erklärt das Modell etwa 4,07% der Varianz in den Daten. Ein niedriger GCV-Wert deutet auf eine gute Anpassung des Modells hin.
k.check(model1)
gam.check(model1)
#F-Wert und der p-Wert geben die statistische Signifikanz der glatten Funktion an. In diesem Fall ist die glatte Funktion von "temperature" hoch signifikant (p-Wert < 2e-16), was darauf hindeutet, dass sie einen signifikanten Einfluss auf die Vorhersage der "incidence" hat.Der angegebene R-squared-Wert (R-sq.(adj)) von 0.0407 gibt an, wie gut das Modell die Varianz der abhängigen Variable erklärt. In diesem Fall erklärt das Modell etwa 4,07% der Varianz in den Daten. Ein niedriger GCV-Wert deutet auf eine gute Anpassung des Modells hin.
k.check(model1)
model1 <- gam(incidence~s(temperature, k = 4), family = "quasipoisson",  na.rm = T)
#F-Wert und der p-Wert geben die statistische Signifikanz der glatten Funktion an. In diesem Fall ist die glatte Funktion von "temperature" hoch signifikant (p-Wert < 2e-16), was darauf hindeutet, dass sie einen signifikanten Einfluss auf die Vorhersage der "incidence" hat.Der angegebene R-squared-Wert (R-sq.(adj)) von 0.0407 gibt an, wie gut das Modell die Varianz der abhängigen Variable erklärt. In diesem Fall erklärt das Modell etwa 4,07% der Varianz in den Daten. Ein niedriger GCV-Wert deutet auf eine gute Anpassung des Modells hin.
k.check(model1)
model1 <- gam(incidence~s(temperature), family = "quasipoisson",  na.rm = T)
#F-Wert und der p-Wert geben die statistische Signifikanz der glatten Funktion an. In diesem Fall ist die glatte Funktion von "temperature" hoch signifikant (p-Wert < 2e-16), was darauf hindeutet, dass sie einen signifikanten Einfluss auf die Vorhersage der "incidence" hat.Der angegebene R-squared-Wert (R-sq.(adj)) von 0.0407 gibt an, wie gut das Modell die Varianz der abhängigen Variable erklärt. In diesem Fall erklärt das Modell etwa 4,07% der Varianz in den Daten. Ein niedriger GCV-Wert deutet auf eine gute Anpassung des Modells hin.
k.check(model1)
gam.check(model1)
plot.gam(model1)
model1 <- gam(incidence~s(temperature, k = 6), family = "quasipoisson",  na.rm = T)
model1 <- gam(incidence~s(temperature, k = 6), family = "quasipoisson",  na.rm = T)
plot.gam(model1)
model1 <- gam(incidence~s(temperature, k = 5), family = "quasipoisson",  na.rm = T)
model1 <- gam(incidence~s(temperature, k = 5), family = "quasipoisson",  na.rm = T)
plot.gam(model1)
#F-Wert und der p-Wert geben die statistische Signifikanz der glatten Funktion an. In diesem Fall ist die glatte Funktion von "temperature" hoch signifikant (p-Wert < 2e-16), was darauf hindeutet, dass sie einen signifikanten Einfluss auf die Vorhersage der "incidence" hat.Der angegebene R-squared-Wert (R-sq.(adj)) von 0.0407 gibt an, wie gut das Modell die Varianz der abhängigen Variable erklärt. In diesem Fall erklärt das Modell etwa 4,07% der Varianz in den Daten. Ein niedriger GCV-Wert deutet auf eine gute Anpassung des Modells hin.
k.check(model1)
model1 <- gam(incidence~s(temperature, k = 5), family = "quasipoisson")
plot.gam(model1)
summary(model1) #edf: → a value close to 1 tends to be close to a linear term → a higher value means that the spline is more wiggly (non-linear).
linear_model <- gam(incidence~temperature)
smooth_model <- gam(incidence~s(temperature))
smooth_model <- gam(incidence~s(temperature))
AIC(linear_model, smooth_model)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
t2m <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(temperature, model1, type = "response")
p1 <- raster::predict(t2m, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
my.p1.mask <- mask(my.p1, thailand)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
model1 <- gam(incidence~s(temperature, k=5), data = data_total, family = "quasipoisson",  na.rm = T)
model1 <- gam(incidence~s(temperature, k=5), data = data_total, family = "quasipoisson",  na.rm = T)
t2m <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
p1 <- raster::predict(t2m, model1, type = "response")
my.area <- extent(thailand)
p1 <- raster::predict(t2m, model1, type = "response")
library(raster)
library(sdm)
library(readxl)
library(mgcv)
library(ncdf4)
attach(data_total)
model1 <- gam(incidence~s(temperature, k=5), data = data_total, family = "quasipoisson",  na.rm = T)
t2m <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(t2m, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
plot.gam(model1)
#F-Wert und der p-Wert geben die statistische Signifikanz der glatten Funktion an. In diesem Fall ist die glatte Funktion von "temperature" hoch signifikant (p-Wert < 2e-16), was darauf hindeutet, dass sie einen signifikanten Einfluss auf die Vorhersage der "incidence" hat.Der angegebene R-squared-Wert (R-sq.(adj)) von 0.0407 gibt an, wie gut das Modell die Varianz der abhängigen Variable erklärt. In diesem Fall erklärt das Modell etwa 4,07% der Varianz in den Daten. Ein niedriger GCV-Wert deutet auf eine gute Anpassung des Modells hin.
k.check(model1)
model1 <- gam(incidence~s(temperature, k = 6), family = "quasipoisson")
#F-Wert und der p-Wert geben die statistische Signifikanz der glatten Funktion an. In diesem Fall ist die glatte Funktion von "temperature" hoch signifikant (p-Wert < 2e-16), was darauf hindeutet, dass sie einen signifikanten Einfluss auf die Vorhersage der "incidence" hat.Der angegebene R-squared-Wert (R-sq.(adj)) von 0.0407 gibt an, wie gut das Modell die Varianz der abhängigen Variable erklärt. In diesem Fall erklärt das Modell etwa 4,07% der Varianz in den Daten. Ein niedriger GCV-Wert deutet auf eine gute Anpassung des Modells hin.
k.check(model1)
model1 <- gam(incidence~s(temperature), family = "quasipoisson")
model1 <- gam(incidence~s(temperature), family = "quasipoisson")
#F-Wert und der p-Wert geben die statistische Signifikanz der glatten Funktion an. In diesem Fall ist die glatte Funktion von "temperature" hoch signifikant (p-Wert < 2e-16), was darauf hindeutet, dass sie einen signifikanten Einfluss auf die Vorhersage der "incidence" hat.Der angegebene R-squared-Wert (R-sq.(adj)) von 0.0407 gibt an, wie gut das Modell die Varianz der abhängigen Variable erklärt. In diesem Fall erklärt das Modell etwa 4,07% der Varianz in den Daten. Ein niedriger GCV-Wert deutet auf eine gute Anpassung des Modells hin.
k.check(model1)
model1 <- gam(incidence~s(temperature, k = 10), family = "quasipoisson")
model1 <- gam(incidence~s(temperature, k = 10), family = "quasipoisson")
plot.gam(model1)
knitr::opts_chunk$set(echo = TRUE)
smoothed_curve <- ss(clean_data_total$temperature, clean_data_total$incidence, nknots = 10)
str(smoothed_curve)
library(npreg)
library(ggplot2)
smoothed_curve <- ss(clean_data_total$temperature, clean_data_total$incidence, nknots = 10)
str(smoothed_curve)
str(smoothed_curve)
a = max(smoothed_curve$x)
plot(clean_data_total$temperature, clean_data_total$incidence, pch = 20,
ylab = "incidence",
xlab = "temperature",
abline(v = mean(clean_data_total$temperature), col = "red"))
plot(clean_data_total$temperature, clean_data_total$incidence, pch = 20,
ylab = "incidence",
xlab = "temperature",
abline(v = mean(clean_data_total$temperature), col = "red"))
plot(smoothed_curve, col = "blue")
knitr::opts_chunk$set(echo = TRUE)
vec_month_monsoon = c(Jun, Jul, Aug, Sep)
data_monsoon = data_total[data_toal$month %in% vec_month_monsoon,]
data_monsoon = data_total[data_total$month %in% vec_month_monsoon,]
vec_month_monsoon = c("Jun", "Jul", "Aug", "Sep")
data_monsoon = data_total[data_total$month %in% vec_month_monsoon,]
View(data_monsoon)
detach(data_total)
search()
attach(data_monsoon)
model1 <- gam(incidence~s(temperature, k = 10), family = "quasipoisson")
library(readxl)
library(nlme)
library(gam)
library(sdm)
library(raster)
library(ncdf4)
library(mgcv)
model1 <- gam(incidence~s(temperature, k = 10), family = "quasipoisson")
plot.gam(model1)
model1 <- gam(incidence~s(temperature), family = "quasipoisson")
plot.gam(model1)
#F-Wert und der p-Wert geben die statistische Signifikanz der glatten Funktion an. In diesem Fall ist die glatte Funktion von "temperature" hoch signifikant (p-Wert < 2e-16), was darauf hindeutet, dass sie einen signifikanten Einfluss auf die Vorhersage der "incidence" hat.Der angegebene R-squared-Wert (R-sq.(adj)) von 0.0407 gibt an, wie gut das Modell die Varianz der abhängigen Variable erklärt. In diesem Fall erklärt das Modell etwa 4,07% der Varianz in den Daten. Ein niedriger GCV-Wert deutet auf eine gute Anpassung des Modells hin.
k.check(model1)
model1 <- gam(incidence~s(temperature, k = 6), family = "quasipoisson")
plot.gam(model1)
smoothed_curve <- ss(data_monsoon$temperature, data_monsoon$incidence, nknots = 10)
library(npreg)
library(ggplot2)
smoothed_curve <- ss(data_monsoon$temperature, data_monsoon$incidence, nknots = 10)
rmv.rows.m = apply(data_monsoon,1,function(x){sum(is.na(x))})
i.missing.m = which(rmv.rows.m >0)
clean_data_monsoon = as.data.frame(data_monsoon[-i.missing.m,])
smoothed_curve <- ss(data_monsoon$temperature, data_monsoon$incidence, nknots = 10)
smoothed_curve <- ss(clean_data_monsoon$temperature, clean_data_monsoon$incidence, nknots = 10)
plot(clean_data_monsoon$temperature, clean_data_monsoon$incidence, pch = 20,
ylab = "incidence",
xlab = "temperature",
abline(v = mean(clean_data_monsoon$temperature), col = "red"))
plot(smoothed_curve, col = "blue")
plot(clean_data_monsoon$temperature, clean_data_monsoon$incidence, pch = 20,
ylab = "incidence",
xlab = "temperature",
abline(v = mean(clean_data_monsoon$temperature), col = "red"))
plot(smoothed_curve, col = "blue")
library(raster)
library(sdm)
library(readxl)
library(mgcv)
library(ncdf4)
attach(data_monsoon)
model1 <- gam(incidence~s(temperature, k=6), data = data_total, family = "quasipoisson",  na.rm = T)
t2m <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(t2m, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson",  na.rm = T)
library(raster)
library(sdm)
library(readxl)
library(mgcv)
library(ncdf4)
attach(data_monsoon)
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson",  na.rm = T)
t2m <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(t2m, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
search()
detach(data_monsoon)
search()
detach(data_monsoon)
search()
detach(data_monsoon)
search()
library(raster)
library(sdm)
library(readxl)
library(mgcv)
library(ncdf4)
attach(data_monsoon)
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson",  na.rm = T)
t2m <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(t2m, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
my.p1.mask <- mask(my.p1, thailand)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
my.p1.mask
p1
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
length(tas)
length(model1)
str(model1)
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
tas
print(tas)
print(tas$t2m)
tas$t2m
tas$temperature
tas$X2031.01.30
names(tas)
tas$var
head(tas)
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
head(tas)
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
head(tas)
str(tas)
str(tas)
vec_month_monsoon = c("Jun", "Jul", "Aug")
data_monsoon = data_total[data_total$month %in% vec_month_monsoon,]
rmv.rows.m = apply(data_monsoon,1,function(x){sum(is.na(x))})
i.missing.m = which(rmv.rows.m >0)
clean_data_monsoon = as.data.frame(data_monsoon[-i.missing.m,])
library(raster)
library(sdm)
library(readxl)
library(mgcv)
library(ncdf4)
attach(data_monsoon)
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
head(tas)
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
library(raster)
library(sdm)
library(readxl)
library(mgcv)
library(ncdf4)
attach(data_monsoon)
search()
detach(data_monsoon)
detach(data_monsoon)
detach(data_monsoon)
search
search()
attach(data_monsoon)
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
wd()
setwd("~/GitHub/topic04_team04")
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
detach(data_monsoon)
detach(data_monsoon)
attach(data_monsoon[,c("temperature","incidence")])
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
detach(newdata)
rm(newdata)
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
newdata
p1 <- raster::predict(tas, model1, type = "response")
p2 <- raster::predict(tas, model1, type = "response")
p1 <- raster::predict(tas, model1, type = "response")
tas <- stack("C:\Users\thadl\OneDrive\Dokumente\GitHub\topic04_team04tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
tas <- stack("C:/Users/thadl/OneDrive/Dokumente/GitHub/topic04_team04/tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
p1 <- raster::predict(t2m, model1, type = "response")
search()
detach(data_monsoon[, c("temperature", "incidence")])
attach(data_monsoon[,c("incidence", "temperature")])
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson")
names(t2m) <- "temperature"
p1 <- raster::predict(t2m, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
my.p1.mask <- mask(my.p1, thailand)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
p1 <- raster::predict(tas, model1, type = "response")
attach(data_monsoon[,c("incidence", "temperature")])
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
names(tas) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
library(raster)
library(sdm)
library(readxl)
library(mgcv)
library(ncdf4)
attach(data_monsoon[,c("incidence", "temperature")])
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(tas) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
detach(data_monsoon[,c("incidence", "temperature")])
data_monsoon[,c("incidence", "temperature")]
summary(p1)
summary(model1)
plot.gam(model1)
p1
p1 <- raster::predict(tas, model1, type = "response")
p1
class(data_total$temperature)
class(data_total$incidence)
data_monsoon$incidence = as.integer(data_monsoon$incidence)
search()
detach(data_monsoon[,c("incidence", "temperature")])
detach(data_monsoon[,c("incidence", "temperature")])
data_monsoon$incidence = as.integer(data_monsoon$incidence)
attach(data_monsoon[,c("incidence", "temperature")])
model1 <- gam(incidence~s(temperature, k=6), family = "quasipoisson")
tas <- stack("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(tas) <- "temperature"
p1 <- raster::predict(tas, model1, type = "response")
p1
vec_month_monsoon = c("Jun", "Jul", "Aug")
data_monsoon = data_total[data_total$month %in% vec_month_monsoon,]
rmv.rows.m = apply(data_monsoon,1,function(x){sum(is.na(x))})
i.missing.m = which(rmv.rows.m >0)
clean_data_monsoon = as.data.frame(data_monsoon[-i.missing.m,])
mean(p1)
