square <- sorted_total_years[k, c(1, 2, j)]
month = colnames(square[3])
square <- cbind(square,month)
colnames(square) = c("data_names", "Reporting_areas", "dengue_cases", "month")
data_total <- rbind(data_total, square)
colnames(data_total) = c("data_names", "Reporting_areas", "dengue_cases", "month")
data_total[m,1] = paste(data_total[m,1], month[1])
m = m + 1
}
}
m = 1
temp_data = read_excel("era5_data_2006_2020_thailand_monmean.xlsx")
temp_data = as.data.frame(temp_data)
temp_data_sorted = data.frame( col1 = numeric(0), Longitude = numeric(0), Latitude = numeric(0))
for (i in 1:77) {
for (j in 5:184) {
temp_data_sorted[m,1] = temp_data[i,j]
temp_data_sorted[m,2] = temp_data[i,3]
temp_data_sorted[m,3] = temp_data[i,4]
m = m + 1
}
}
data_total = cbind(data_total, temp_data_sorted)
colnames(data_total)[5] = "temperature"
library(readxl)
Endung <- "_population.xlsx"
#empty dataframe for the data
total_population = data.frame(Reporting_areas = character(), population_count = numeric())
# stack years of 2006-2011 below each other
for (i in 2006:2011) {
population_df  = data.frame()
Dateiname <- paste0(i, Endung) #erstellen das Dateinamens
population_df = read_excel(Dateiname) #erstellen der Variable und zuweisen der Excel-Tabelle
vec_years = rep(i, times = 77)
population_df = cbind(population_df,vec_years)
names(population_df) = c("Reporting_areas", "population_count", "year")
# multiply every row 12 times for each month
repeat_count <- 12
population_df_replicated <- population_df[rep(row.names(population_df), each = repeat_count), ]
row.names(population_df_replicated) <- NULL
#put all the years together
total_population = rbind(total_population, population_df_replicated)
}
# stack years of 2012-2020 below each other and add to data_total
population_df = read_excel("2012-2020_population.xlsx")
colnames(population_df) = c("Reporting_areas", "population_count", "population_count", "population_count", "population_count", "population_count","population_count","population_count","population_count","population_count")
pop_placeholder = data.frame(Reporting_areas = character(), population_count = numeric(), year = numeric())
col_num = 2
for (i in 2012:2020) {
year = rep(i, times = 77)
pop_placeholder = rbind(pop_placeholder, cbind(population_df[,c(1,col_num)],year))
names(pop_placeholder) = c("Reporting_areas", "population_count", "year")
col_num = col_num + 1
}
# multiply every row 12 times for each month
repeat_count <- 12
population_df_replicated <- pop_placeholder[rep(row.names(pop_placeholder), each = repeat_count), ]
row.names(population_df_replicated) <- NULL
# combine all population data in each
total_population = rbind(total_population, population_df_replicated)
sorted_total_population = total_population[order(total_population$"Reporting_areas"),]
data_total = cbind(data_total,sorted_total_population[,c(2,3)])
row.names(data_total) = NULL
first_date = as.Date("2006-01-01")
last_date = as.Date("2020-12-31")
time_column_short = seq(first_date, last_date, by = "month")
time_column_short = as.Date(time_column_short, format = "%Y-%m")
time_column = rep(time_column_short, times = 77)
data_total = cbind(data_total, time_column)
#data_total = subset(data_total, select = -time_column)
detect_na <- function(x) {
is_na <- x %in% c("N/A", "na", "NA", "n/a")
replace(x, is_na, NA)
}
data_total <- apply(data_total, 2, detect_na)
rmv.rows = apply(data_total,1,function(x){sum(is.na(x))})
i.missing = which(rmv.rows >0)
data_total = as.data.frame(data_total)
data_total$dengue_cases = as.integer(data_total$dengue_cases)
data_total$population_count = as.integer(data_total$population_count)
dimensions = dim(data_total)
R= dimensions[1]
for(Zeile in 1:R){
Population <- data_total$population_count[Zeile]
Infection <- data_total$dengue_cases[Zeile]
Incidence = (Infection/Population)*100000
data_total$incidence[Zeile] <- Incidence
}
clean_data_total = as.data.frame(data_total[-i.missing,])
num_col = c("temperature", "Longitude", "Latitude", "incidence")
int_col = c("dengue_cases","population_count","year")
date_col = c("time_column")
clean_data_total[int_col] = lapply(clean_data_total[int_col], as.integer)
clean_data_total[num_col] = lapply(clean_data_total[num_col], as.numeric)
clean_data_total[date_col] = lapply(clean_data_total[date_col], as.Date)
summary(clean_data_total)
data_total = as.data.frame(data_total)
num_col = c("temperature", "Longitude", "Latitude", "incidence")
int_col = c("dengue_cases","population_count","year")
date_col = c("time_column")
data_total[int_col] = lapply(data_total[int_col], as.integer)
data_total[num_col] = lapply(data_total[num_col], as.numeric)
data_total[date_col] = lapply(data_total[date_col], as.Date)
data_total = subset(data_total, select = c("data_names", "Reporting_areas", "year", "month", "time_column", "dengue_cases", "population_count", "temperature", "Longitude", "Latitude", "incidence"))
save(data_total, file = "data_total.RData")
summary(data_total)
for (i in 1:dim(data_total)[1]) {
if(data_total$Reporting_areas[i]=="Bungkan"){
Datum <- data_total$time_column[i]
for(j in 1:dim(data_total)[1]){
if(data_total$Reporting_areas[j] == "Nong Khai" & data_total$time_column[j] == Datum){
data_total$dengue_cases[j]<- ifelse(is.na(data_total$dengue_cases[i]), data_total$dengue_cases[j], data_total$dengue_cases[i]+data_total$dengue_cases[j])
data_total$population_count[j]<- ifelse(is.na(data_total$population_count[i]), data_total$population_count[j], data_total$population_count[i]+data_total$population_count[j])
data_total$incidence[j]<- ifelse(is.na(data_total$incidence[i]), data_total$incidence[j], data_total$incidence[i]+data_total$incidence[j])
}
}
}
}
data_total <- data_total[data_total$Reporting_areas != "Bungkan", ]
month_vec = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec" )
total_thailand = data.frame(data_names = character(), dengue_cases = numeric())
for (i in 2006:2020) {
name_years = paste0("rows_", i)
assign(name_years, data_total[data_total$year == i, ])
for (month in month_vec) {
name_months = paste0(name_years, month)
a = get(name_years)
assign(name_months, a[a$month == month, ])
b = get(name_months)
total_cases = sum(b$dengue_cases, na.rm = T)
name_column = paste0(i,"_", month)
placeholder_df = data.frame(data_names = name_column, dengue_cases = total_cases)
total_thailand = rbind(total_thailand, placeholder_df)
}
}
total_thailand = cbind(total_thailand, time_column_short)
library(ggplot2)
library(forecast)
Ts_thai <- ts(total_thailand$dengue_cases, frequency = 12, start = c(2006, 1))
TSstudio::ts_plot(Ts_thai)
# moving average
autoplot(Ts_thai) +
autolayer(ma(Ts_thai, order = 12)) +
xlab("Year") + ylab("dengue_cases") +
ggtitle("Dengue_cases_thailand_with_MA")
#additive decomposing
decomposed_thai_add <- decompose(Ts_thai, type="additive") # use type = "additive" for additive components
plot(decomposed_thai_add)
grid(lty = 2, col = "gray")
#seasonal decomposing
decomposed_thai_seas <- stl(Ts_thai, s.window = "periodic")
plot(decomposed_thai_seas, main = "Decomposition of a periodic time series", xaxt = "n")
grid(lty = 2, col = "gray")
library(tseries)
adf.test(Ts_thai) # p-value (0.01) < 0.05 indicates the TS is stationary --> suggests it is stationary
# alternative hypothesis: stationary
kpss.test(Ts_thai, null = c("Level", "Trend"))
#both test indicate stationarity
acf_thailand <- acf(total_thailand$dengue_cases)
pacf_thailand <- pacf(total_thailand$dengue_cases)
library(forecast)
Ts_thai_auto  <- auto.arima(Ts_thai)
Ts_thai_auto
#auto_thailand_stat = auto.arima(Ts_thai_stat)
#auto_thailand_stat
#auto_thailand_2  <- auto.arima(Ts_thai, stepwise = F, approximation = F)
#auto_thailand_2
#this auto-ARIMA was removed because it took to long and had a higher AIC
library(forecast)
horizon_thai <- 48
forecasted_thai_auto <- forecast(Ts_thai_auto, h = horizon_thai)
forecasted_thai_Ts <- forecasted_thai_auto$mean
forecasted_thai_Ts  <- ts(forecasted_thai_Ts, frequency = 12, start = c(2021, 1) )
plot(forecasted_thai_Ts)
forecast_thai_Df <- as.data.frame(forecasted_thai_auto)
forecast_thai_Df$time <- time(forecasted_thai_Ts)
names(forecast_thai_Df) <- c("point", "lo_80", "hi_80" , "lo_95", "hi_95", "time")
library(ggplot2)
ggplot() +
geom_line(data = Ts_thai, aes(x = time(Ts_thai), y = Ts_thai), color = "black") +
geom_ribbon(data = forecast_thai_Df, aes(x = time, ymin = lo_95, ymax = hi_95), fill = "gray80") +
geom_line(data = forecast_thai_Df, aes(x = time, y = point), color = "blue") +
labs(title = "Time Series Forecast") +
xlab("Year") +
ylab("Dengue Cases") +
theme_minimal()
library(forecast)
horizon_thai <- 48
forecasted_thai_auto <- forecast(Ts_thai_auto, h = horizon_thai)
forecasted_thai_Ts <- forecasted_thai_auto$mean
forecasted_thai_Ts  <- ts(forecasted_thai_Ts, frequency = 12, start = c(2020, 1) )
plot(forecasted_thai_Ts)
library(forecast)
horizon_thai <- 48
forecasted_thai_auto <- forecast(Ts_thai_auto, h = horizon_thai)
forecasted_thai_Ts <- forecasted_thai_auto$mean
forecasted_thai_Ts  <- ts(forecasted_thai_Ts, frequency = 12, start = c(2021, 1) )
plot(forecasted_thai_Ts)
library(forecast)
#exclude_end <- 3
Ts_thai_2018 = window(Ts_thai, end = c(2019, 12))
Ts_thai_auto_2018  <- auto.arima(Ts_thai_2018)
Ts_thai_auto_2018
forecasted_thai_2018 <- forecast(Ts_thai_auto_2018, h = horizon_thai)
forecasted_thai_2018_Ts <- forecasted_thai_2018$mean
forecasted_thai_2018_Ts  <- ts(forecasted_thai_2018_Ts, frequency = 12, start = c(2019, 1) )
plot(forecasted_thai_2018_Ts)
forecast_thai_2018_Df <- as.data.frame(forecasted_thai_2018)
forecast_thai_2018_Df$time <- time(forecasted_thai_2018_Ts)
names(forecast_thai_2018_Df) <- c("point", "lo_80", "hi_80" , "lo_95", "hi_95", "time")
library(ggplot2)
ggplot() +
geom_ribbon(data = forecast_thai_2018_Df, aes(x = time, ymin = lo_95, ymax = hi_95), fill = "gray80") +
geom_line(data = forecast_thai_2018_Df, aes(x = time, y = point), color = "blue") +
geom_line(data = Ts_thai, aes(x = time(Ts_thai), y = Ts_thai), color = "black") +
labs(title = "Time Series Forecast") +
xlab("Year") +
ylab("Dengue Cases") +
theme_minimal()
library(forecast)
Ts_thai_2018 = window(Ts_thai, end = c(2018, 12))
Ts_thai_auto_2018  <- auto.arima(Ts_thai_2018)
Ts_thai_auto_2018
forecasted_thai_2018 <- forecast(Ts_thai_auto_2018, h = horizon_thai)
forecasted_thai_2018_Ts <- forecasted_thai_2018$mean
forecasted_thai_2018_Ts  <- ts(forecasted_thai_2018_Ts, frequency = 12, start = c(2018, 1) )
plot(forecasted_thai_2018_Ts)
forecast_thai_2018_Df <- as.data.frame(forecasted_thai_2018)
forecast_thai_2018_Df$time <- time(forecasted_thai_2018_Ts)
names(forecast_thai_2018_Df) <- c("point", "lo_80", "hi_80" , "lo_95", "hi_95", "time")
library(ggplot2)
ggplot() +
geom_ribbon(data = forecast_thai_2018_Df, aes(x = time, ymin = lo_95, ymax = hi_95), fill = "gray80") +
geom_line(data = forecast_thai_2018_Df, aes(x = time, y = point), color = "blue") +
geom_line(data = Ts_thai, aes(x = time(Ts_thai), y = Ts_thai), color = "black") +
labs(title = "Time Series Forecast") +
xlab("Year") +
ylab("Dengue Cases") +
theme_minimal()
?auto.arima
knitr::opts_chunk$set(echo = TRUE)
dimensions= dim(data_total)
R= dimensions[1]
for(Zeile in 1:R){
Population <- data_total$population_count[Zeile]
Infection <- data_total$dengue_cases[Zeile]
Incidence = (Infection/Population)*100000
data_total$incidence[Zeile] <- Incidence
}
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:76)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
}
mean_tempvec <- c(mean_tempvec,mean(tempvec))
}
mean_tempvec
# Libraries
library(ggplot2)
# create data
month_dates <- seq(as.Date("2006-01-01"), as.Date("2020-12-01"), by = "month", format = "%m")
xValue <- month_dates
yValue <- mean_tempvec
data <- data.frame(xValue,yValue)
# Plot
ggplot() +
geom_line(data, mapping=aes(x=xValue, y=yValue)) +
stat_smooth(method = "lm", col = "red", mapping=aes(x=xValue, y=yValue)) +
xlab("Years") +
ylab("Temperature [°C]")
max_mean_tempvec = max(mean_tempvec)
min_mean_tempvec = min(mean_tempvec)
max_mean_tempvec
min_mean_tempvec
subset_mean_temp = function(start, end, mean_tempvec, month_dates){
# input as string
start_date = as.Date(start)
end_date = as.Date(end)
subset_temp = subset(mean_tempvec, month_dates >= start_date & month_dates <= end_date)
month_dates_year = seq(start_date, end_date, by = "month", format = "%m")
data_year = data.frame(month_dates_year, subset_temp)
ggplot(data_year, mapping = aes(x=month_dates_year, y=subset_temp))+
geom_line()+
geom_point()+
xlab("Months") +
ylab("Temperature [°C]") +
ggtitle(paste("Monthly mean temperature in Thailand", start, " - ", end))
}
ggplot(data_year, mapping = aes(x=month_dates_year, y=subset_temp))+
geom_line()+
geom_point()+
xlab("Months") +
ylab("Temperature [°C]") +
ggtitle(paste("Monthly mean temperature in Thailand", start, " - ", end))
subset_mean_temp = function(start, end, mean_tempvec, month_dates){
# input as string
start_date = as.Date(start)
end_date = as.Date(end)
subset_temp = subset(mean_tempvec, month_dates >= start_date & month_dates <= end_date)
month_dates_year = seq(start_date, end_date, by = "month", format = "%m")
data_year = data.frame(month_dates_year, subset_temp)
ggplot(data_year, mapping = aes(x=month_dates_year, y=subset_temp))+
geom_line()+
geom_point()+
xlab("Months") +
ylab("Temperature [°C]") +
ggtitle(paste("Monthly mean temperature in Thailand", start, " - ", end))
}
ggplot(data_year, mapping = aes(x=month_dates_year, y=subset_temp))+
geom_line()+
geom_point()+
xlab("Months") +
ylab("Temperature [°C]") +
ggtitle(paste("Monthly mean temperature in Thailand", start, " - ", end))
data_year = data.frame(month_dates_year, subset_temp)
month_dates_year = seq(start_date, end_date, by = "month", format = "%m")
subset_mean_temp = function(start, end, mean_tempvec, month_dates){
# input as string
start_date = as.Date(start)
end_date = as.Date(end)
subset_temp = subset(mean_tempvec, month_dates >= start_date & month_dates <= end_date)
month_dates_year = seq(start_date, end_date, by = "month", format = "%m")
data_year = data.frame(month_dates_year, subset_temp)
ggplot(data_year, mapping = aes(x=month_dates_year, y=subset_temp))+
geom_line()+
geom_point()+
xlab("Months") +
ylab("Temperature [°C]") +
ggtitle(paste("Monthly mean temperature in Thailand", start, " - ", end))
}
subset_mean_temp("2013-06-01", "2014-06-30", mean_tempvec, month_dates)
subset_mean_temp("2016-01-01", "2016-12-31", mean_tempvec, month_dates)
dengue_plot_cases = c()
dengue_plot_time = c()
dengue_plot_cases <- data_total$dengue_cases[data_total$Reporting_areas == "Bangkok"]
dengue_plot_time <- data_total$time_column[data_total$Reporting_areas == "Bangkok"]
plot(dengue_plot_time,dengue_plot_cases, type = "o")
q.dengue = quantile(data_total$incidence, probs = c(0.01,0.1,0.25,0.5,0.75,0.9,0.99), na.rm = TRUE)
hist(data_total$incidence,  breaks = 200, main = "Distribution of incidence", xlab = "incidence", freq = TRUE);abline(v=q.dengue,lty=3,lwd=2,col='red')
plot(data_total$temperature, data_total$incidence, pch = 20,
ylab = "incidence",
xlab = "temperature",
abline(v = mean(data_total$temperature), col = "red"),
)
plot(rank(data_total$temperature), rank(data_total$incidence), pch = 20,
ylab = "incidence",
xlab = "temperature",
abline(v = mean(data_total$temperature), col = "red"))
qqplot(data_total$temperature, data_total$incidence)
#pearson correlation y.t.
cor(mean_dengue.y.t$dengue_cases, mean_temp.y.t$temperature)
f_mean_dengue.y.t = function(){
mean_dengue.y.t <- data.frame(dengue_cases = numeric(), time_column = as.Date(character()))
for (i in c(2006:2020)) {
month = data_total[data_total$year == i,]
m_month = data.frame(dengue_cases = mean(month$dengue_cases, na.rm = TRUE), time_column = month$time_column[1])
mean_dengue.y.t = rbind(mean_dengue.y.t, m_month)
}
return(mean_dengue.y.t)
}
mean_dengue.y.t = as.data.frame(f_mean_dengue.y.t())
f_mean_temp.y.t = function(){
mean_temp.y.t <- data.frame(temperature = numeric(), time_column = as.Date(character()))
for (i in c(2006:2020)) {
month = data_total[data_total$year == i,]
m_month = data.frame(temperature = mean(month$temperature, na.rm = TRUE), time_column = month$time_column[1])
mean_temp.y.t = rbind(mean_temp.y.t, m_month)
}
return(mean_temp.y.t)
}
mean_temp.y.t = as.data.frame(f_mean_temp.y.t())
plot(data_total$temperature, data_total$incidence, pch = 20,
ylab = "incidence",
xlab = "temperature",
abline(v = mean(data_total$temperature), col = "red"),
)
plot(rank(data_total$temperature), rank(data_total$incidence), pch = 20,
ylab = "incidence",
xlab = "temperature",
abline(v = mean(data_total$temperature), col = "red"))
qqplot(data_total$temperature, data_total$incidence)
#pearson correlation y.t.
cor(mean_dengue.y.t$dengue_cases, mean_temp.y.t$temperature)
#spearman correlation y.t.
cor(mean_dengue.y.t$dengue_cases, mean_temp.y.t$temperature, method = "spearman")
#pearson correlation m.r.
cor(clean_data_total$dengue_cases, clean_data_total$temperature)
#spearman correlation m.r.
cor(clean_data_total$dengue_cases, clean_data_total$temperature, method = "spearman")
pheatmap::pheatmap(cor(clean_data_total[c("dengue_cases", "population_count", "temperature", "incidence")]))
#mean of temp and incidence over all years per area
t_data_total = t(data_total)
r_areas = unique(data_total$Reporting_areas)
m_inc_temp.y.r = data.frame(Reporting_areas = character(), incidence = numeric(), temperature = numeric())
for (i in r_areas){
temp_inc = apply(data_total[which(clean_data_total$Reporting_areas == i),c("incidence", "temperature")], 2,function(g){mean(g, na.rm = TRUE)})
temp_inc_df = data.frame(Reporting_areas = i, incidence = temp_inc["incidence"], temperature = temp_inc["temperature"])
m_inc_temp.y.r = rbind(m_inc_temp.y.r, temp_inc_df)
rownames(m_inc_temp.y.r) <- 1:nrow(m_inc_temp.y.r)
}
#mean of temp and incidence over all years per area
t_data_total = t(data_total)
r_areas = unique(data_total$Reporting_areas)
m_inc_temp.y.r = data.frame(Reporting_areas = character(), incidence = numeric(), temperature = numeric())
for (i in r_areas){
temp_inc = apply(data_total[which(clean_data_total$Reporting_areas == i),c("incidence", "temperature")], 2,function(g){mean(g, na.rm = TRUE)})
temp_inc_df = data.frame(Reporting_areas = i, incidence = temp_inc["incidence"], temperature = temp_inc["temperature"])
m_inc_temp.y.r = rbind(m_inc_temp.y.r, temp_inc_df)
rownames(m_inc_temp.y.r) <- 1:nrow(m_inc_temp.y.r)
}
#elbow method
km = kmeans(m_inc_temp.y.r["incidence"], centers = 2, nstart = 10)
km$tot.withinss
wss = sapply(2:7,function(k) {
kmeans(m_inc_temp.y.r["incidence"], centers = k)$tot.withinss
})
plot(2:7,wss,type='b',pch=19,xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
#silhoutte method
library(cluster)
#library (NbClust)
#library (clustertend)
library (factoextra)
#library (fpc)
#library (clValid)
#find optimal number of clusters by incidence
D_inc = dist(m_inc_temp.y.r["incidence"])
km_inc = kmeans(m_inc_temp.y.r["incidence"], centers = 4, nstart = 10)
s_inc = silhouette(km_inc$cluster,D_inc)
plot(s_inc)
fviz_nbclust(m_inc_temp.y.r["incidence"], pam, method = "silhouette")+ theme_classic()
#find optimal number of clusters by temperature
D_temp = dist(m_inc_temp.y.r["temperature"])
km_temp = kmeans(m_inc_temp.y.r["temperature"], centers = 4, nstart = 10)
s_temp = silhouette(km_temp$cluster,D_temp)
plot(s_temp)
fviz_nbclust(m_inc_temp.y.r["temperature"], pam, method = "silhouette")+ theme_classic()
#find optimal number of clusters by temperature and incidence
D_inc_temp = dist(scale(m_inc_temp.y.r[,c("incidence","temperature")]))
km_inc_temp = kmeans(scale(m_inc_temp.y.r[,c("incidence","temperature")]), centers = 3)
s_inc_temp = silhouette(km_inc_temp$cluster,D_inc_temp)
plot(s_inc_temp)
fviz_nbclust(scale(m_inc_temp.y.r[,c("incidence","temperature")]), pam, method = "silhouette")+ theme_classic()
m_inc_temp_cluster.y.r = data.frame(m_inc_temp.y.r, km_inc_temp$cluster)
plot1 = ggplot(m_inc_temp.y.r, aes(x = temperature, y = incidence, color = as.factor(km_inc$cluster))) +
geom_point() +
labs(title = "Partitioning Clustering Plot by incidence") +
theme_classic()
plot2 = ggplot(m_inc_temp.y.r, aes(x = temperature, y = incidence, color = as.factor(km_temp$cluster))) +
geom_point() +
labs(title = "Partitioning Clustering Plot by temperature") +
theme_classic()
plot3 = ggplot(m_inc_temp.y.r, aes(x = temperature, y = incidence, color = as.factor(km_inc_temp$cluster))) +
geom_point() +
labs(title = "Partitioning Clustering Plot") +
theme_classic()
plot3
gridExtra::grid.arrange(plot1, plot2, plot3, ncol = 1)
library(sf)
library(ggplot2)
district_sf <- st_read("gadm36_THA_shp/gadm36_THA_1.shp")
map_incidence_monthly = function(incidence_month){
max_incidence = which.max(incidence_month$incidence)
max_incidence_area = incidence_month$Reporting_areas[max_incidence]
ggplot() +
geom_sf(data = district_sf, aes(fill = incidence_month$incidence)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(fill = paste("Highest incidence =", max_incidence, "in", max_incidence_area))
}
#input for incidence month in format: rows_YYYY_Mon
map_incidence_monthly(rows_2016Apr)
library(sf)
library(ggplot2)
district_sf <- st_read("gadm36_THA_shp/gadm36_THA_1.shp")
#Inzidenz vom April 2006 auf die karte geplottet
district_sf$incidence2006Aug<- rows_2006Aug$incidence
library(raster)
library(sdm)
library(readxl)
library(mgcv)
library(ncdf4)
attach(data_total)
t2m <- stack ("tas_SEA22_MPI_rcp85_2021-2040_grid_subc_daymean_monmean_swm_timmean_thai.nc")
names(t2m) <- "temperature"
p1 <- raster::predict(t2m, model1, type = "response")
thailand <- raster::getData('GADM', country='THA', level=1)
my.area <- extent(thailand)
my.p1 <- crop(p1, my.area)
my.p1.mask <- mask(my.p1, thailand)
pdf(file="C:/Users/thadl/OneDrive/Dokumente/Bioinfo/Klimaprojekt/maxtemp_Abun2.pdf")
#pdf(file="C:/Users/thadl/OneDrive/Dokumente/Bioinfo/Klimaprojekt/maxtemp_Abun2.pdf")
plot(my.p1.mask, legend.width=1, legend.shrink=0.75, axes= FALSE, box=FALSE) + title("Predicted values: Influence of Temp on dengue cases", line = +1) + plot(thailand, add=TRUE)
library(sf)
library(ggplot2)
district_sf <- st_read("gadm36_THA_shp/gadm36_THA_1.shp")
#Inzidenz vom April 2006 auf die karte geplottet
district_sf$incidence2006Aug<- rows_2006Aug$incidence
library(sf)
library(ggplot2)
district_sf <- st_read("gadm36_THA_shp/gadm36_THA_1.shp")
map_incidence_monthly = function(incidence_month){
max_incidence = which.max(incidence_month$incidence)
max_incidence_area = incidence_month$Reporting_areas[max_incidence]
ggplot() +
geom_sf(data = district_sf, aes(fill = incidence_month$incidence)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(fill = paste("Highest incidence =", max_incidence, "in", max_incidence_area))
}
#input for incidence month in format: rows_YYYY_Mon
map_incidence_monthly(rows_2016Apr)
