}
m = 1
data_total_dengue = data.frame(col1 = character(0), col2 = character(0), col3 = numeric(0), month = character(0))
colnames(data_total_dengue) = c("data_names", "Reporting_areas", "dengue_cases", "month")
sorted_total_years = total_years[order(total_years$"Reporting_areas"),]
for (k in 1:1155){
for (j in 3:14){
square <- sorted_total_years[k, c(1, 2, j)]
month = colnames(square[3])
square <- cbind(square,month)
colnames(square) = c("data_names", "Reporting_areas", "dengue_cases", "month")
data_total_dengue <- rbind(data_total_dengue, square)
colnames(data_total_dengue) = c("data_names", "Reporting_areas", "dengue_cases", "month")
data_total_dengue[m,1] = paste(data_total_dengue[m,1], month[1])
m = m + 1
}
}
knitr::opts_chunk$set(echo = TRUE)
data_total
#ggplot template
# Libraries
library(ggplot2)
# create data
xValue <-
yValue <-
data <- data.frame(xValue,yValue)
knitr::opts_chunk$set(echo = TRUE)
data_total
knitr::opts_chunk$set(echo = TRUE)
install.packages("readxl")
library(readxl)
library(readxl)
library(dplyr)
Endung <- "_dengue_extracted.xlsx"
Anfang <- "Dengue"
for (i in 2006:2020) {
Dateiname <- paste0(i, Endung) #erstellen das Dateinamens
Name_df <- paste0(Anfang, i) #Name des Dataframe
assign(Name_df, read_excel(Dateiname)) #erstellen der Variable und zuweisen der Excel-Tabelle
df_dengue <- get(Name_df)
vec_data_names <- vector("character")
vec_data_names <- sapply(df_dengue$Reporting_areas, function(g) {
paste(g[1], i)
}) #Vektor mit Distriktnamen füllen
data_names <- matrix(vec_data_names,nrow = 77, ncol = 1)#Distriktnamen in Matrix (da Vektor horizontal)
df_dengue <- cbind(data_names, df_dengue) #Namenspalte an Datensatz anfügen
assign(Name_df,df_dengue) #Namen der dataframes den Daten zuordnen
}
total_years = data.frame()
for (i in 2006:2020){
a = get(paste0("Dengue",i))
total_years = rbind(total_years, a)
}
m = 1
data_total_dengue = data.frame(col1 = character(0), col2 = character(0), col3 = numeric(0), month = character(0))
colnames(data_total_dengue) = c("data_names", "Reporting_areas", "dengue_cases", "month")
sorted_total_years = total_years[order(total_years$"Reporting_areas"),]
for (k in 1:1155){
for (j in 3:14){
square <- sorted_total_years[k, c(1, 2, j)]
month = colnames(square[3])
square <- cbind(square,month)
colnames(square) = c("data_names", "Reporting_areas", "dengue_cases", "month")
data_total_dengue <- rbind(data_total_dengue, square)
colnames(data_total_dengue) = c("data_names", "Reporting_areas", "dengue_cases", "month")
data_total_dengue[m,1] = paste(data_total_dengue[m,1], month[1])
m = m + 1
}
}
m = 1
temp_data = read_excel("era5_data_2006_2020_thailand_monmean.xlsx")
temp_data = as.data.frame(temp_data)
temp_data_sorted = data.frame( col1 = numeric(0))
for (i in 1:77) {
for (j in 5:184) {
temp_data_sorted[m,1] = temp_data[i,j]
m = m + 1
}
}
data_total = cbind(data_total_dengue, temp_data_sorted)
colnames(data_total)[5] = "temperature"
detect_na <- function(x) {
is_na <- x %in% c("N/A", "na", "NA", "n/a")
replace(x, is_na, NA)
}
missing_data_total <-  apply(data_total, 2, detect_na)
rmv.rows = apply(missing_data_total,1,function(x){sum(is.na(x))})
knitr::opts_chunk$set(echo = TRUE)
data_total
#ggplot template
# Libraries
library(ggplot2)
# create data
xValue <-
yValue <-
data <- data.frame(xValue,yValue)
month_dates <- seq(as.Date("2006-01-01"), as.Date("2020-12-01"), by = "month", format = "%m")
plot(x = month_dates[c(1:180)], y = data_total$temperature[c(1:180)], type = "l",xlab="Time", ylab="Temperature", col="red")
lmodel=lm(data_total$temperature[c(1:180)] ~ month_dates[c(1:180)])
abline(lmodel,col="blue")
axis(4, seq(20,32))
for(d in c(1:180)){
tempvec= c()
for (n in c(1:77)) {
data_total$temperature[d + 180*n]
}
}
tempvec_01_2006 <- c()
for (n in c(1:77)) {
temp_01_2006 <- data_total$temperature[1 + 180*n]
tempvec <- c(tempvec)
}
}
tempvec_01_2006 <- c()
for (n in c(1:77)) {
temp_01_2006 <- data_total$temperature[1 + 180*n]
tempvec <- c(tempvec)
}
tempvec_01_2006 <- c()
for (n in c(1:77)) {
temp_01_2006 <- data_total$temperature[1 + 180*n]
tempvec <- c(tempvec)
}
tempvec
tempvec_01_2006 <- c()
for (n in c(1:77)) {
temp_01_2006 <- data_total$temperature[1 + 180*n]
tempvec <- c(tempvec, temp_01_2006)
}
tempvec
tempvec <- c()
for (d in c(1:180) {
tempvec <- c()
for (d in c(1:180)) {
for (n in c(1:77)) {
temp <- data_total$temperature[d + 180*n]
tempvec <- c(tempvec,temp )
}}
tempvec
mean_tempvec()
mean_tempvec <- c()
for (d in c(1:180)) {
tempvec <- c()
for (n in c(1:77)) {
temp <- data_total$temperature[d + 180*n]
tempvec <- c(tempvec,temp )
mean_tempvec <- mean(tempvec)
}}
mean_tempvec
?mean
mean_tempvec <- c()
for (d in c(1:180)) {
tempvec <- c()
for (n in c(1:77)) {
temp <- data_total$temperature[d + 180*n]
tempvec <- c(tempvec,temp)
mean_tempvec <- mean(tempvec)
}}
mean_tempvec
mean(tempvec)
for (n in c(1:77)) {
temp <- data_total$temperature[d + 180*n]
tempvec <- c(tempvec,temp)
mean_tempvec <- mean(tempvec)
str(data_total$temperature)
}
str(data_total$temperature)
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*district]
tempvec <- c(tempvec,temp)
mean_tempvec <- mean(tempvec)
}}
mean_tempvec
tempvec
is.na %% data_total$temperature
is.na(data_total$temperature)
sum(is.na(data_total$temperature))
tempvec
data_total
knitr::opts_chunk$set(echo = TRUE)
data_total = as.data.frame(data_total)
num_col = c("temperature", "Longitude", "Latitude")
int_col = c("dengue_cases","population_count","year")
data_total[int_col] = lapply(data_total[int_col], as.integer)
data_totoal
data_total
knitr::opts_chunk$set(echo = TRUE)
install.packages("readxl")
library(readxl)
library(readxl)
library(dplyr)
Endung <- "_dengue_extracted.xlsx"
Anfang <- "Dengue"
for (i in 2006:2020) {
Dateiname <- paste0(i, Endung) #erstellen das Dateinamens
Name_df <- paste0(Anfang, i)
assign(Name_df, read_excel(Dateiname)) #erstellen der Variable und zuweisen der Excel-Tabelle
df_dengue <- get(Name_df)
vec_data_names <- vector("character")
vec_data_names <- sapply(df_dengue$Reporting_areas, function(g) {
paste(g[1], i)
})
data_names <- matrix(vec_data_names,nrow = 77, ncol = 1)
df_dengue <- cbind(data_names, df_dengue)
assign(Name_df,df_dengue)
}
total_years = data.frame()
for (i in 2006:2020){
a = get(paste0("Dengue",i))
total_years = rbind(total_years, a)
}
m = 1
data_total = data.frame(col1 = character(0), col2 = character(0), col3 = numeric(0), month = character(0))
colnames(data_total) = c("data_names", "Reporting_areas", "dengue_cases", "month")
sorted_total_years = total_years[order(total_years$"Reporting_areas"),]
for (k in 1:1155){
for (j in 3:14){
square <- sorted_total_years[k, c(1, 2, j)]
month = colnames(square[3])
square <- cbind(square,month)
colnames(square) = c("data_names", "Reporting_areas", "dengue_cases", "month")
data_total <- rbind(data_total, square)
colnames(data_total) = c("data_names", "Reporting_areas", "dengue_cases", "month")
data_total[m,1] = paste(data_total[m,1], month[1])
m = m + 1
}
}
install.packages("readxl")
m = 1
temp_data = read_excel("era5_data_2006_2020_thailand_monmean.xlsx")
temp_data = as.data.frame(temp_data)
temp_data_sorted = data.frame( col1 = numeric(0), Longitude = numeric(0), Latitude = numeric(0))
for (i in 1:77) {
for (j in 5:184) {
temp_data_sorted[m,1] = temp_data[i,j]
temp_data_sorted[m,2] = temp_data[i,3]
temp_data_sorted[m,3] = temp_data[i,4]
m = m + 1
}
}
data_total = cbind(data_total_dengue, temp_data_sorted)
colnames(data_total)[5] = "temperature"
library(readxl)
Endung <- "_population.xlsx"
#empty dataframe for the data
total_population = data.frame(Reporting_areas = character(), population_count = numeric())
# stack years of 2006-2011 below each other
for (i in 2006:2011) {
population_df  = data.frame()
Dateiname <- paste0(i, Endung) #erstellen das Dateinamens
population_df = read_excel(Dateiname) #erstellen der Variable und zuweisen der Excel-Tabelle
vec_years = rep(i, times = 77)
population_df = cbind(population_df,vec_years)
names(population_df) = c("Reporting_areas", "population_count", "year")
# multiply every row 12 times for each month
repeat_count <- 12
population_df_replicated <- population_df[rep(row.names(population_df), each = repeat_count), ]
row.names(population_df_replicated) <- NULL
#put all the years together
total_population = rbind(total_population, population_df_replicated)
}
# stack years of 2012-2020 below each other and add to data_total
population_df = read_excel("2012-2020_population.xlsx")
colnames(population_df) = c("Reporting_areas", "population_count", "population_count", "population_count", "population_count", "population_count","population_count","population_count","population_count","population_count")
pop_placeholder = data.frame(Reporting_areas = character(), population_count = numeric(), year = numeric())
col_num = 2
for (i in 2012:2020) {
year = rep(i, times = 77)
pop_placeholder = rbind(pop_placeholder, cbind(population_df[,c(1,col_num)],year))
names(pop_placeholder) = c("Reporting_areas", "population_count", "year")
col_num = col_num + 1
}
# multiply every row 12 times for each month
repeat_count <- 12
population_df_replicated <- pop_placeholder[rep(row.names(pop_placeholder), each = repeat_count), ]
row.names(population_df_replicated) <- NULL
# combine all population data in each
total_population = rbind(total_population, population_df_replicated)
sorted_total_population = total_population[order(total_population$"Reporting_areas"),]
data_total = cbind(data_total,sorted_total_population[,c(2,3)])
row.names(data_total) = NULL
first_date = as.Date("2006-01-01")
last_date = as.Date("2020-12-31")
time_column_short = seq(first_date, last_date, by = "month")
time_column_short = format(time_column_short, "%Y-%m")
time_column = rep(time_column_short, times = 77)
data_total = cbind(data_total, time_column)
detect_na <- function(x) {
is_na <- x %in% c("N/A", "na", "NA", "n/a")
replace(x, is_na, NA)
}
data_total <- apply(data_total, 2, detect_na)
rmv.rows = apply(data_total,1,function(x){sum(is.na(x))})
data_total = as.data.frame(data_total)
num_col = c("temperature", "Longitude", "Latitude")
int_col = c("dengue_cases","population_count","year")
data_total[int_col] = lapply(data_total[int_col], as.integer)
data_total[num_col] = lapply(data_total[num_col], as.numeric)
data_total = subset(data_total, select = c("data_names", "Reporting_areas", "year", "month", "time_column", "dengue_cases", "population_count", "temperature", "Longitude", "Latitude"))
data_total
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*district]
tempvec <- c(tempvec,temp)
mean_tempvec <- mean(tempvec)
}}
mean_tempvec
View(data_total)
View(data_total)
is.na(data_total)
sum(is.na(data_total))
sum(is.na(data_total$temperature))
1+180*77
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
mean_tempvec <- mean(tempvec)
}}
mean_tempvec
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
mean_tempvec <- mean(tempvec)
}}
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
mean_tempvec <- mean(tempvec)
}}
mean_tempvec
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
mean_tempvec <- c(mean_tempvec,mean(tempvec))
}}
mean_tempvec
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
mt <- mean(tempvec)
mean_tempvec <- c(mean_tempvec,mt)
}}
mean_tempvec
mt
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
mean_tempvec <- c(mean_tempvec,mean(tempvec))
}}
mean_tempvec
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
}
mean_tempvec <- c(mean_tempvec,mean(tempvec))
}
mean_tempvec
month_dates <- seq(as.Date("2006-01-01"), as.Date("2020-12-01"), by = "month", format = "%m")
plot(x = month_dates[c(1:180)], y = mean_tempvec, type = "l",xlab="Time", ylab="Temperature", col="red")
lmodel=lm(mean_tempvec ~ month_dates[c(1:180)])
abline(lmodel,col="blue")
axis(4, seq(20,32))
plot(x = data_total$time_column, y = data_total$temperature, type = p, xlab = time, ylab = temperature, col = "blue")
plot(x = data_total$time_column, y = data_total$temperature, type = p, xlab = "time", ylab = "temperature"", col = "blue")
plot(x = data_total$time_column, y = data_total$temperature, type = p, xlab = "time", ylab = "temperature", col = "blue")
month_dates <- seq(as.Date("2006-01-01"), as.Date("2020-12-01"), by = "month", format = "%m")
plot(x = data_total$time_column, y = data_total$temperature, type = p, xlab = "time", ylab = "temperature", col = "blue")
?xlim
plot(x = data_total$time_column, y = data_total$temperature, type = p, xlab = "time", ylab = "temperature", col = "blue")
plot(x = factor(data_total$time_column), y = data_total$temperature, type = p, xlab = "time", ylab = "temperature", col = "blue")
plot(x = factor(data_total$time_column), y = data_total$temperature, type = "p", xlab = "time", ylab = "temperature", col = "blue")
plot(x = data_total$time_column, y = data_total$temperature, type = "p", xlab = "time", ylab = "temperature", col = "blue")
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
}
mean_tempvec <- c(mean_tempvec,mean(tempvec))
}
mean_tempvec
tempvec_01_2006 <- c()
for (n in c(1:77)) {
temp_01_2006 <- data_total$temperature[1 + 180*n]
tempvec <- c(tempvec, temp_01_2006)
}
tempvec
mean_tempvec <- c()
for (month in c(1:180)) {
tempvec <- c()
for (district in c(1:77)) {
temp <- data_total$temperature[month + 180*(district-1)]
tempvec <- c(tempvec,temp)
}
mean_tempvec <- c(mean_tempvec,mean(tempvec))
}
mean_tempvec
plot(x = data_total$time_column, y = data_total$temperature, type = "p", xlab = "time", ylab = "temperature", col = "blue")
month_dates <- seq(as.Date("2006-01-01"), as.Date("2020-12-01"), by = "month", format = "%m")
plot(x = month_dates[c(1:180)], y = data_total$temperature[c(1:180)], type = "l",xlab="Time", ylab="Temperature", col="red")
lmodel=lm(data_total$temperature[c(1:180)] ~ month_dates[c(1:180)])
abline(lmodel,col="blue")
axis(4, seq(20,32))
month_dates <- seq(as.Date("2006-01-01"), as.Date("2020-12-01"), by = "month", format = "%m")
plot(x = month_dates[c(1:180)], y = mean_tempvec, type = "l",xlab="Time", ylab="Temperature", col="red")
lmodel=lm(mean_tempvec ~ month_dates[c(1:180)])
abline(lmodel,col="blue")
axis(4, seq(20,32))
?ggplot
#ggplot template
# Libraries
library(ggplot2)
# create data
xValue <- month_dates
yValue <- mean_tempvec
data <- data.frame(xValue,yValue)
# Plot
ggplot(data, aes(x=xValue, y=yValue)) +
geom_line()
knitr::opts_chunk$set(echo = TRUE)
#ggplot template
# Libraries
library(ggplot2)
# create data
xValue <- month_dates
yValue <- mean_tempvec
data <- data.frame(xValue,yValue)
# Plot
ggplot(data, aes(x=xValue, y=yValue))
geom_line()
#ggplot template
# Libraries
library(ggplot2)
# create data
xValue <- month_dates
yValue <- mean_tempvec
data <- data.frame(xValue,yValue)
# Plot
ggplot(data, aes(x=xValue, y=yValue)) +
geom_line()
month_dates <- seq(as.Date("2006-01-01"), as.Date("2020-12-01"), by = "month", format = "%m")
plot(x = month_dates[c(1:180)], y = data_total$temperature[c(1:180)], type = "l",xlab="Time", ylab="Temperature", col="red", main="Temperature in Amnat Charoen")
lmodel=lm(data_total$temperature[c(1:180)] ~ month_dates[c(1:180)])
abline(lmodel,col="blue")
axis(4, seq(20,32))
# Libraries
library(ggplot2)
# create data
xValue <- month_dates
yValue <- mean_tempvec
data <- data.frame(xValue,yValue)
# Plot
ggplot(data, aes(x=xValue, y=yValue)) +
geom_line()
ggplot(lmodel_thailand_temp, aes(x=xValue, y=yValue)) +
geom_line()
lmodel_thailand_temp = lm(mean_tempvec ~ month_dates[c(1:180)])
# Libraries
library(ggplot2)
# create data
xValue <- month_dates
yValue <- mean_tempvec
data <- data.frame(xValue,yValue)
# Plot
ggplot(data, aes(x=xValue, y=yValue)) +
geom_line()
ggplot(lmodel_thailand_temp, aes(x=xValue, y=yValue)) +
geom_line()
install.packages("readxl")
install.packages("nlme")
install.packages("'gam")
install.packages("sdm")
install.packages("raster")
install.packages("lncdf4")
library (readxl)
library(nime)
library(nlme)
library(gam)
install.packages("gam")
library(gam)
library(sdm)
library(raster)
library(ncdf4)
library(lncdf4)
install.packages("lncdf4")
